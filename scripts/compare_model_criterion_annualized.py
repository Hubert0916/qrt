"""Generate window-by-model-by-criterion annualized return summary tables."""

from __future__ import annotations

import argparse
from pathlib import Path
from typing import Optional

import pandas as pd

from experiments import benchmark_core


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description=(
            "Pivot annualized return by model, criterion, and window and export as CSV."
        )
    )
    parser.add_argument(
        "--metrics",
        type=Path,
        required=True,
        help="Path to metrics.csv generated by benchmark runs.",
    )
    parser.add_argument(
        "--outdir",
        type=Path,
        default=None,
        help="Directory for the output CSV (defaults to metrics parent directory).",
    )
    parser.add_argument(
        "--filename",
        type=str,
        default="annualized_return_by_model_criterion.csv",
        help="Name for the exported CSV file.",
    )
    parser.add_argument(
        "--float-format",
        type=str,
        default="%.6f",
        help="Format string for floating point export.",
    )
    return parser


def main(argv: Optional[list[str]] = None) -> None:
    parser = build_parser()
    args = parser.parse_args(argv)

    if not args.metrics.exists():
        parser.error(f"Metrics file not found: {args.metrics}")

    df = pd.read_csv(args.metrics)
    required_cols = {"window", "model", "criterion", "annualized_return"}
    missing_cols = required_cols.difference(df.columns)
    if missing_cols:
        parser.error(
            f"Metrics file is missing required columns: {', '.join(sorted(missing_cols))}"
        )

    pivot = benchmark_core.annualized_return_by_model_criterion(df)
    if pivot.empty:
        parser.error("Metrics file contains no annualized return records.")

    outdir = args.outdir or args.metrics.parent
    outdir.mkdir(parents=True, exist_ok=True)
    outfile = outdir / args.filename
    pivot.to_csv(outfile, float_format=args.float_format)

    print(f"Saved detailed table to {outfile}")


if __name__ == "__main__":  # pragma: no cover
    main()
